var documenterSearchIndex = {"docs":
[{"location":"#GraphQLite.jl","page":"GraphQLite.jl","title":"GraphQLite.jl","text":"","category":"section"},{"location":"","page":"GraphQLite.jl","title":"GraphQLite.jl","text":"CurrentModule = GraphQLite","category":"page"},{"location":"#Simple,-fast,-limited-scope-implementation-of-GraphQL-in-Julia.-Converts-GraphQL-input-into-a-composition-of-arrays-and-Dicts.","page":"GraphQLite.jl","title":"Simple, fast, limited-scope implementation of GraphQL in Julia. Converts GraphQL input into a composition of arrays and Dicts.","text":"","category":"section"},{"location":"#Setup","page":"GraphQLite.jl","title":"Setup","text":"","category":"section"},{"location":"","page":"GraphQLite.jl","title":"GraphQLite.jl","text":"using GraphQLite","category":"page"},{"location":"#API-index","page":"GraphQLite.jl","title":"API index","text":"","category":"section"},{"location":"","page":"GraphQLite.jl","title":"GraphQLite.jl","text":"","category":"page"},{"location":"#Components","page":"GraphQLite.jl","title":"Components","text":"","category":"section"},{"location":"","page":"GraphQLite.jl","title":"GraphQLite.jl","text":"GraphQLite.runquery\nGraphQLite.runmutation\nGraphQLite.resolve\nGraphQLite.resolveinput\nGraphQLite.dict2struct","category":"page"},{"location":"#GraphQLite.runquery","page":"GraphQLite.jl","title":"GraphQLite.runquery","text":"runquery(gql::String, vars::Union{<:AbstractDict,Nothing}=nothing, extra::Union{<:AbstractDict,Nothing}=nothing; kwargs...)\n\nExample:\n\nget_cart = \"\n    query GetCarts(\\$id: Int!){\n        myShoppingCart: getCart(id: $id){\n            items { id name alternateNames brandId brand{name} }\n        }\n    }\n\"\nresponse = runquery(get_cart, json2dict(\"\"\"{\"id\":1}\"\"\"))\n@assert response isa Dict   \n@assert response[:myShoppingCart] isa Dict\n@assert response[:myShoppingCart][:items] isa Vector{<:AbstractDict}\n\n\n\n\n\n","category":"function"},{"location":"#GraphQLite.runmutation","page":"GraphQLite.jl","title":"GraphQLite.runmutation","text":"runmutation(gql::String, vars::Union{<:AbstractDict,Nothing}=nothing, extra::Union{<:AbstractDict,Nothing}=nothing; kwargs...)\n\nExample:\n\nadd_item = \"\n    mutation AddShoppingCartItem($input: CartItemInput!){\n        addItemToCart(input: $input){\n            items { $item_fragment }\n        }\n    }\n\"\nresponse = runmutation(\n    add_item, \n    json2dict(\"\"\"{\"input\":{\"cartId\":1, \"itemId\":5}}\"\"\"),\n)\n@assert response isa Dict   \n@assert response[:addItemToCart] isa Dict\n@assert response[:addItemToCart][:items] isa Vector{<:AbstractDict}\n\n\n\n\n\n","category":"function"},{"location":"#GraphQLite.resolve","page":"GraphQLite.jl","title":"GraphQLite.resolve","text":"resolve(parent::T, field::Val{F}, args)\n\nExample:\n\nfunction GraphQLite.resolve(parent::GQLQuery, field::Val{:getCart}, args)\n    # return a object of type Cart\nend\n\n\n\n\n\n","category":"function"},{"location":"#GraphQLite.resolveinput","page":"GraphQLite.jl","title":"GraphQLite.resolveinput","text":"resolveinput(field::Val{F}, d::T)\n\nExample:\n\n\n@schema \"\"\"\n...\ntype Mutation {\n    addItemToCart(input: CartItemInput): Cart\n}\n...\ninput CartItemInput {\n    cartId: Int!\n    itemId: Int!\n    quantity: Int!\n}\n...\n\"\"\"\n\n@kwdef struct CartItemInput\n    quantity::Int = 1\n    cart_id::Int\n    item_id::Int\nend\n\nGraphQLite.resolveinput(::Val{:CartItemInput}, d::Dict) = CartItemInput(d)\n\n\n\n\n\n","category":"function"},{"location":"#GraphQLite.dict2struct","page":"GraphQLite.jl","title":"GraphQLite.dict2struct","text":"dict2struct(::Type{T}, d::Dict)\n\nConvenience method for converting a Dict to a custom type.\n\nExample:\n\n\n@kwdef struct CartItemInput\n    quantity::Int = 1\n    cart_id::Int\n    item_id::Int\nend\n\n@assert dict2struct(CartItemInput, Dict(:cart_id=>1, :item_id=>2)) == CartItemInput(1, 1, 2)\n\n\n\n\n\n","category":"function"}]
}
